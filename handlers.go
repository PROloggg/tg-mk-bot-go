package main

import (
	"app/db"
	tools "app/handlers"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
)

var userSpeakerDir = make(map[int64]string)

func HandleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	user := update.Message.From
	chatID := update.Message.Chat.ID
	phone := ""

	if update.Message.Contact != nil {
		phone = update.Message.Contact.PhoneNumber
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
	err := db.UpsertUser(
		dbConn,
		chatID,
		phone, // —Ç–µ–ª–µ—Ñ–æ–Ω –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ
		user.FirstName+" "+user.LastName,
		"", // –≥–æ—Ä–æ–¥ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ
		"", // –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ
	)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
	}

	if update.Message.Contact != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –µ–≥–æ
		msg := tgbotapi.NewMessage(chatID, "üíá‚Äç‚ôÄÔ∏è –°–ø–∞—Å–∏–±–æ, –∂–¥–µ–º –≤–∞—Å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ! üíáüèª")
		tools.SendAndLog(bot, msg)

		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")
	msg.ReplyMarkup = SpeakerKeyboard()
	tools.SendAndLog(bot, msg)
}

func HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	switch {

	case strings.HasPrefix(data, "speaker_"):
		pickSpeaker(data, bot, chatID, update)
	case strings.HasPrefix(data, "course_"):
		pickCourse(data, bot, chatID, update)
	case data == "book_course":
		text, err := tools.ReadTextFile("data/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.txt")
		if err != nil {
			text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."
		}

		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = ContactKeyboard()
		tools.SendAndLog(bot, msg)

	case data == "needed_tools":
		speakerDir := userSpeakerDir[chatID]
		msg := tgbotapi.NewMessage(chatID, tools.GetToolsText(speakerDir))
		tools.SendAndLog(bot, msg)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback (—á–µ—Ä–µ–∑ Request, –∞ –Ω–µ —á–µ—Ä–µ–∑ SendAndLog!)
	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ callback: %v", err)
	}

}

// pickSpeaker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–∏–∫–µ—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ –¥–∞—Ç—É –æ–±—É—á–µ–Ω–∏—è
func pickSpeaker(data string, bot *tgbotapi.BotAPI, chatID int64, update tgbotapi.Update) {
	idx, _ := strconv.Atoi(strings.TrimPrefix(data, "speaker_"))
	speaker := Speakers[idx].Name
	user := update.CallbackQuery.From
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
	err := db.UpsertUser(
		dbConn,
		chatID,
		"", // —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–µ–Ω—è–µ–º
		user.FirstName+" "+user.LastName,
		"", // –≥–æ—Ä–æ–¥ –Ω–µ –º–µ–Ω—è–µ–º
		speaker,
	)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞:", err)
	}
	msg := tgbotapi.NewMessage(chatID, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏ –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ?")
	msg.ReplyMarkup = CourseKeyboard(idx)
	tools.SendAndLog(bot, msg)
}

// pickCourse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
func pickCourse(data string, bot *tgbotapi.BotAPI, chatID int64, update tgbotapi.Update) {
	parts := strings.Split(strings.TrimPrefix(data, "course_"), "_")
	speakerIdx, _ := strconv.Atoi(parts[0])
	courseIdx, _ := strconv.Atoi(parts[1])
	course := Speakers[speakerIdx].Courses[courseIdx]
	city := course.City
	user := update.CallbackQuery.From

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
	err := db.UpsertUser(
		dbConn,
		chatID,
		"", // —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–µ–Ω—è–µ–º
		user.FirstName+" "+user.LastName,
		city,
		"", // –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –º–µ–Ω—è–µ–º
	)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–∞–ø–∫–∏ —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	programPath := strings.TrimPrefix(course.Program, "/")
	speakerDir := programPath
	if strings.Contains(programPath, "/") {
		speakerDir = strings.SplitN(programPath, "/", 2)[0]
	} else if strings.Contains(programPath, "\\") {
		speakerDir = strings.SplitN(programPath, "\\", 2)[0]
	}
	userSpeakerDir[chatID] = speakerDir

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	header := tgbotapi.NewMessage(chatID, "–í–æ—Ç –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ üëá")
	tools.SendAndLog(bot, header)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º—É –ø—Ä–æ–≥—Ä–∞–º–º—É (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª)
	err = tools.SendCourseProgram(bot, chatID, course.Program)
	if err != nil {
		log.Print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫—É—Ä—Å–∞:", err)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = CourseActionKeyboard()
	tools.SendAndLog(bot, msg)
}
