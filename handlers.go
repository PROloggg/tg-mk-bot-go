package main

import (
	"app/db"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

var userSpeakerDir = make(map[int64]string)

func HandleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	user := update.Message.From
	chatID := update.Message.Chat.ID
	phone := ""

	if update.Message.Contact != nil {
		phone = update.Message.Contact.PhoneNumber
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
	err := db.UpsertUser(
		dbConn,
		chatID,
		phone, // —Ç–µ–ª–µ—Ñ–æ–Ω –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ
		user.FirstName+" "+user.LastName,
		"", // –≥–æ—Ä–æ–¥ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ
		"", // –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ
	)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
	}

	if update.Message.Contact != nil {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –µ–≥–æ
		msg := tgbotapi.NewMessage(chatID, "üíá‚Äç‚ôÄÔ∏è –°–ø–∞—Å–∏–±–æ, –∂–¥–µ–º –≤–∞—Å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ! üíáüèª")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!")
	msg.ReplyMarkup = SpeakerKeyboard()
	bot.Send(msg)
}

func HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	switch {
	case strings.HasPrefix(data, "speaker_"):
		idx, _ := strconv.Atoi(strings.TrimPrefix(data, "speaker_"))
		speaker := Speakers[idx].Name
		user := update.CallbackQuery.From
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
		err := db.UpsertUser(
			dbConn,
			chatID,
			"", // —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–µ–Ω—è–µ–º
			user.FirstName+" "+user.LastName,
			"", // –≥–æ—Ä–æ–¥ –Ω–µ –º–µ–Ω—è–µ–º
			speaker,
		)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞:", err)
		}
		msg := tgbotapi.NewMessage(chatID, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏ –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ?")
		msg.ReplyMarkup = CourseKeyboard(idx)
		bot.Send(msg)
	case strings.HasPrefix(data, "course_"):
		parts := strings.Split(strings.TrimPrefix(data, "course_"), "_")
		speakerIdx, _ := strconv.Atoi(parts[0])
		courseIdx, _ := strconv.Atoi(parts[1])
		course := Speakers[speakerIdx].Courses[courseIdx]
		city := course.City
		user := update.CallbackQuery.From

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
		err := db.UpsertUser(
			dbConn,
			chatID,
			"", // —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–µ–Ω—è–µ–º
			user.FirstName+" "+user.LastName,
			city,
			"", // –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –º–µ–Ω—è–µ–º
		)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:", err)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–∞–ø–∫–∏ —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		programPath := strings.TrimPrefix(course.Program, "/")
		speakerDir := strings.SplitN(programPath, "/", 2)[0]
		userSpeakerDir[chatID] = speakerDir

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		header := tgbotapi.NewMessage(chatID, "–í–æ—Ç –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ üëá")
		bot.Send(header)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º—É –ø—Ä–æ–≥—Ä–∞–º–º—É (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª)
		sendCourseProgram(bot, chatID, course.Program)

		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = CourseActionKeyboard()
		bot.Send(msg)
	case data == "book_course":
		text, err := readTextFile("data/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.txt")
		if err != nil {
			text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."
		}

		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = ContactKeyboard()
		bot.Send(msg)
	case data == "needed_tools":
		speakerDir := userSpeakerDir[chatID]
		msg := tgbotapi.NewMessage(chatID, getToolsText(speakerDir))
		bot.Send(msg)
	}

	bot.Send(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
}

func sendCourseProgram(bot *tgbotapi.BotAPI, chatID int64, program string) error {
	ext := strings.ToLower(filepath.Ext(program))
	baseDir := "data"

	switch ext {
	case ".jpg", ".jpeg", ".png":
		filePath := filepath.Join(baseDir, program)
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(filePath))
		photo.Caption = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞"
		_, err := bot.Send(photo)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:", err)
		}
		return err
	case ".pdf":
		filePath := filepath.Join(baseDir, program)
		doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
		doc.Caption = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞"
		_, err := bot.Send(doc)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF:", err)
		}
		return err
	default:
		msg := tgbotapi.NewMessage(chatID, program)
		_, err := bot.Send(msg)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞:", err)
		}
		return err
	}
}

func readTextFile(path string) (string, error) {
	bytes, err := os.ReadFile(filepath.Clean(path))
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
		return "", err
	}
	return string(bytes), nil
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ –ø–∞–ø–∫–µ —Å–ø–∏–∫–µ—Ä–∞, –ø–æ—Ç–æ–º –æ–±—â–∏–π
func getToolsText(speakerDir string) string {
	// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ —Å–ø–∏–∫–µ—Ä–∞
	speakerTools := filepath.Join("data", speakerDir, "–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.txt")
	if _, err := os.Stat(speakerTools); err == nil {
		text, err := os.ReadFile(speakerTools)
		if err == nil {
			return string(text)
		}
		log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–ø–∏–∫–µ—Ä–∞:", err)
	}
	// –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä–µ–º –æ–±—â–∏–π
	commonTools := filepath.Join("data", "–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.txt")
	text, err := os.ReadFile(commonTools)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:", err)
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
	}
	return string(text)
}
